name: Auto Version Management

on:
  push:
    branches: [ main, latest ]
  workflow_dispatch: # Allow manual triggering

permissions:
  contents: write
  pull-requests: write

jobs:
  auto-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for accurate commit count
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Get version information
      id: version
      run: |
        # Get git information
        echo "commit_count=$(git rev-list --count HEAD)" >> $GITHUB_OUTPUT
        echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> $GITHUB_OUTPUT
        echo "commit_date=$(git log -1 --format=%cd --date=short)" >> $GITHUB_OUTPUT
        
        # Display version info
        echo "📊 Version Information:"
        echo "   Commit Count: $(git rev-list --count HEAD)"
        echo "   Commit Hash: $(git rev-parse --short HEAD)"
        echo "   Branch: $(git rev-parse --abbrev-ref HEAD)"
        echo "   Date: $(git log -1 --format=%cd --date=short)"
    
    - name: Update version files
      run: |
        # Debug: show current directory and files
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        echo "Checking version.py exists:"
        if [ -f "version.py" ]; then
          echo "✅ version.py found"
          python --version
          python version.py --update
        else
          echo "❌ version.py not found!"
          exit 1
        fi
        
        # Display updated files
        echo "📁 Updated version files:"
        echo "   version.json:"
        cat version.json
        echo ""
        echo "   .env:"
        cat .env
    
    - name: Commit and push version updates
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add version files
        git add version.json .env
        
        # Check if there are changes
        if git diff --staged --quiet; then
          echo "✅ No version changes to commit"
        else
          # Commit changes
          git commit -m "🤖 Auto-update version to v${{ steps.version.outputs.commit_count }}.${{ steps.version.outputs.commit_hash }}"
          
          # Push changes with better error handling
          echo "🔄 Pushing changes to ${{ steps.version.outputs.branch }}..."
          if git push origin ${{ steps.version.outputs.branch }}; then
            echo "✅ Version files committed and pushed successfully"
          else
            echo "❌ Failed to push changes"
            echo "Git status:"
            git status
            echo "Git remote:"
            git remote -v
            exit 1
          fi
        fi
    
    - name: Create summary
      run: |
        echo "## 🚀 Auto Version Update Complete!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** v${{ steps.version.outputs.commit_count }}.${{ steps.version.outputs.commit_hash }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ steps.version.outputs.branch }}" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** ${{ steps.version.outputs.commit_date }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Files Updated:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ version.json" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ .env" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Update your Portainer stack environment variables" >> $GITHUB_STEP_SUMMARY
        echo "2. Redeploy to get the latest version" >> $GITHUB_STEP_SUMMARY
        echo "3. Test the version form interface" >> $GITHUB_STEP_SUMMARY
