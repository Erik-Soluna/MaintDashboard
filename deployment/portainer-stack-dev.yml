# WARNING: This file is for development environment only.
# Do NOT merge MaintDashboard/portainer-stack-dev.yml into the main branch.
# It is intended for use with the 'latest' or other development branches only.

version: '3.8'

services:
  db-dev:
    image: postgres:15
    container_name: maintenance_db_dev
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-maintenance_dashboard_dev}
      POSTGRES_USER: ${DB_USER:-maintenance_user_dev}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-DevPassword2024!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5433:5432"
    networks:
      - maintenance_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-maintenance_user_dev} -d ${DB_NAME:-maintenance_dashboard_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis-dev:
    image: redis:7-alpine
    container_name: maintenance_redis_dev
    ports:
      - "6380:6379"
    networks:
      - maintenance_network_dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  web-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: maintenance_web_dev
    command: >
      sh -c "chmod +x /app/scripts/database/ensure-database.sh &&
             /app/scripts/database/ensure-database.sh &&
             python manage.py init_database --admin-username ${ADMIN_USERNAME:-admin} --admin-email ${ADMIN_EMAIL:-admin@dev.maintenance.errorlog.app} --admin-password ${ADMIN_PASSWORD:-DevAdminPassword2024!} &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 2 --timeout 120 --max-requests 500 --max-requests-jitter 50 maintenance_dashboard.wsgi:application"
    volumes:
      - static_volume_dev:/app/staticfiles
      - media_volume_dev:/app/media
    ports:
      - "4406:8000"
    environment:
      - DEBUG=True
      - SECRET_KEY=django-development-secret-key-change-this-immediately-2024
      - DB_NAME=maintenance_dashboard_dev
      - DB_USER=maintenance_user_dev
      - DB_PASSWORD=DevPassword2024!
      - DB_HOST=db-dev
      - DB_PORT=5432
      - REDIS_URL=redis://redis-dev:6379/0
      - ALLOWED_HOSTS=dev.maintenance.errorlog.app,localhost,127.0.0.1
      - ADMIN_USERNAME=admin
      - ADMIN_EMAIL=admin@dev.maintenance.errorlog.app
      - ADMIN_PASSWORD=DevAdminPassword2024!
      - DOMAIN=dev.maintenance.errorlog.app
      # Development Security Settings
      - SECURE_SSL_REDIRECT=False
      - SESSION_COOKIE_SECURE=False
      - CSRF_COOKIE_SECURE=False
      - SECURE_BROWSER_XSS_FILTER=True
      - SECURE_CONTENT_TYPE_NOSNIFF=True
      - SECURE_HSTS_SECONDS=0
      - SECURE_HSTS_INCLUDE_SUBDOMAINS=False
      - SECURE_HSTS_PRELOAD=False
      - CSRF_TRUSTED_ORIGINS=http://dev.maintenance.errorlog.app,https://dev.maintenance.errorlog.app
      - SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
    depends_on:
      db-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - maintenance_network_dev
      - proxy-network
    labels:
      # Nginx Proxy Manager/Traefik Configuration for Development
      - "traefik.enable=true"
      - "traefik.http.routers.maintenance-web-dev.rule=Host(`dev.maintenance.errorlog.app`)"
      - "traefik.http.routers.maintenance-web-dev.entrypoints=websecure"
      - "traefik.http.routers.maintenance-web-dev.tls.certresolver=letsencrypt"
      - "traefik.http.routers.maintenance-web-dev.tls.domains[0].main=dev.maintenance.errorlog.app"
      - "traefik.http.services.maintenance-web-dev.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy-network"
      # Development Security Headers
      - "traefik.http.middlewares.maintenance-dev-security.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.maintenance-dev-security.headers.customrequestheaders.X-Forwarded-Host=dev.maintenance.errorlog.app"
      - "traefik.http.middlewares.maintenance-dev-security.headers.customrequestheaders.X-Forwarded-Server=dev.maintenance.errorlog.app"
      - "traefik.http.middlewares.maintenance-dev-security.headers.customresponseheaders.X-Content-Type-Options=nosniff"
      - "traefik.http.middlewares.maintenance-dev-security.headers.customresponseheaders.X-Frame-Options=SAMEORIGIN"
      - "traefik.http.middlewares.maintenance-dev-security.headers.customresponseheaders.X-XSS-Protection=1; mode=block"
      # Apply security middleware
      - "traefik.http.routers.maintenance-web-dev.middlewares=maintenance-dev-security"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/core/health/simple/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  celery-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: maintenance_celery_dev
    command: >
      sh -c "chmod +x /app/scripts/celery/start_celery.sh &&
             /app/scripts/celery/start_celery.sh"
    environment:
      - DEBUG=True
      - SECRET_KEY=django-development-secret-key-change-this-immediately-2024
      - DB_NAME=maintenance_dashboard_dev
      - DB_USER=maintenance_user_dev
      - DB_PASSWORD=DevPassword2024!
      - DB_HOST=db-dev
      - DB_PORT=5432
      - REDIS_URL=redis://redis-dev:6379/0
      - C_FORCE_ROOT=1
      # Celery Development Settings
      - CELERY_BROKER_URL=redis://redis-dev:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-dev:6379/0
      - CELERY_WORKER_CONCURRENCY=1
      - CELERY_WORKER_MAX_TASKS_PER_CHILD=500
      - CELERY_WORKER_PREFETCH_MULTIPLIER=1
    depends_on:
      db-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - maintenance_network_dev
    healthcheck:
      test: ["CMD-SHELL", "celery -A maintenance_dashboard inspect ping || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  celery-beat-dev:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: maintenance_celery_beat_dev
    command: >
      sh -c "chmod +x /app/scripts/celery/start_celery_beat.sh &&
             /app/scripts/celery/start_celery_beat.sh"
    environment:
      - DEBUG=True
      - SECRET_KEY=django-development-secret-key-change-this-immediately-2024
      - DB_NAME=maintenance_dashboard_dev
      - DB_USER=maintenance_user_dev
      - DB_PASSWORD=DevPassword2024!
      - DB_HOST=db-dev
      - DB_PORT=5432
      - REDIS_URL=redis://redis-dev:6379/0
      # Celery Beat Development Settings
      - CELERY_BROKER_URL=redis://redis-dev:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-dev:6379/0
    depends_on:
      db-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - maintenance_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'celery.*beat' || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 90s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

networks:
  maintenance_network_dev:
    driver: bridge
  proxy-network:
    external: true

volumes:
  postgres_data_dev:
  static_volume_dev:
  media_volume_dev: 