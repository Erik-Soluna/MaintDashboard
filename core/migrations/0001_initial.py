# Generated by Django 5.2.4 on 2025-07-09 17:58

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EquipmentCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Unique category name for equipment', max_length=100, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional category description')),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Equipment Category',
                'verbose_name_plural': 'Equipment Categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('manager', 'Maintenance Manager'), ('technician', 'Maintenance Technician'), ('viewer', 'Read-Only Viewer')], default='viewer', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('employee_id', models.CharField(blank=True, max_length=50, unique=True)),
                ('department', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Location name', max_length=200)),
                ('is_site', models.BooleanField(default=False, help_text='Whether this is a site-level location')),
                ('latitude', models.FloatField(blank=True, help_text='GPS latitude', null=True)),
                ('longitude', models.FloatField(blank=True, help_text='GPS longitude', null=True)),
                ('address', models.TextField(blank=True, help_text='Physical address')),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('parent_location', models.ForeignKey(blank=True, help_text='Parent location for hierarchical organization', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='child_locations', to='core.location')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['name'],
                'constraints': [models.CheckConstraint(condition=models.Q(('is_site', True), models.Q(('parent_location', None), _negated=True), _negated=True), name='site_locations_no_parent')],
            },
        ),
    ]
