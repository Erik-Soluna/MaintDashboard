#!/usr/bin/env python3
"""
Test Script for Portainer Integration
Verifies environment variable injection and configuration
"""

import os
import json
import subprocess
import sys
from datetime import datetime

def test_environment_variables():
    """Test if required environment variables are set"""
    print("üîç Testing Environment Variables...")
    
    required_vars = [
        'GIT_COMMIT_COUNT',
        'GIT_COMMIT_HASH', 
        'GIT_BRANCH',
        'GIT_COMMIT_DATE'
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.environ.get(var)
        if value:
            print(f"  ‚úÖ {var}: {value}")
        else:
            print(f"  ‚ùå {var}: Not set")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è  Missing environment variables: {', '.join(missing_vars)}")
        return False
    else:
        print("‚úÖ All required environment variables are set")
        return True

def test_version_files():
    """Test if version files exist and are readable"""
    print("\nüìÅ Testing Version Files...")
    
    # Check version.json
    if os.path.exists('version.json'):
        try:
            with open('version.json', 'r') as f:
                version_data = json.load(f)
            print(f"  ‚úÖ version.json: {version_data['version']}")
            return version_data
        except Exception as e:
            print(f"  ‚ùå Error reading version.json: {e}")
            return None
    else:
        print("  ‚ùå version.json not found")
        return None

def test_docker_compose_files():
    """Test if Docker compose files exist and are valid"""
    print("\nüê≥ Testing Docker Compose Files...")
    
    compose_files = [
        'docker-compose.yml',
        'portainer-stack.yml', 
        'portainer-stack-dev.yml'
    ]
    
    for file in compose_files:
        if os.path.exists(file):
            print(f"  ‚úÖ {file}: Found")
            
            # Check for health check URLs
            try:
                with open(file, 'r') as f:
                    content = f.read()
                    if '/health/simple/' in content:
                        print(f"    ‚úÖ Health check URL: Correct")
                    elif '/core/health/simple/' in content:
                        print(f"    ‚ö†Ô∏è  Health check URL: Needs update")
                    else:
                        print(f"    ‚ùå Health check URL: Not found")
            except Exception as e:
                print(f"    ‚ùå Error reading {file}: {e}")
        else:
            print(f"  ‚ùå {file}: Not found")

def test_portainer_build_script():
    """Test if Portainer build script exists and works"""
    print("\nüöÄ Testing Portainer Build Script...")
    
    script_path = 'scripts/portainer_build.sh'
    if os.path.exists(script_path):
        print(f"  ‚úÖ {script_path}: Found")
        
        # Check if script is executable
        if os.access(script_path, os.X_OK):
            print("    ‚úÖ Script is executable")
        else:
            print("    ‚ö†Ô∏è  Script is not executable")
    else:
        print(f"  ‚ùå {script_path}: Not found")

def generate_portainer_env_template():
    """Generate a template .env file for Portainer"""
    print("\nüìù Generating Portainer Environment Template...")
    
    version_data = test_version_files()
    if not version_data:
        print("  ‚ùå Cannot generate template without version data")
        return
    
    env_template = f"""# Portainer Environment Variables for Maintenance Dashboard
# Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
# Current Version: {version_data['version']}

# Version Information (Auto-generated by GitHub Actions)
GIT_COMMIT_COUNT={version_data['commit_count']}
GIT_COMMIT_HASH={version_data['commit_hash']}
GIT_BRANCH={version_data['branch']}
GIT_COMMIT_DATE={version_data['commit_date']}

# Database Configuration
DB_NAME=maintenance_dashboard_prod
DB_USER=maintenance_user
DB_PASSWORD=SecureProdPassword2024!
POSTGRES_PASSWORD=SecureProdPassword2024!
DB_PORT=5432

# Web Service Configuration
WEB_PORT=4405
DEBUG=False
SECRET_KEY=django-production-secret-key-change-this-immediately-2024
ALLOWED_HOSTS=maintenance.errorlog.app,10.0.0.28,localhost,127.0.0.1
ADMIN_USERNAME=admin
ADMIN_EMAIL=admin@maintenance.errorlog.app
ADMIN_PASSWORD=SecureAdminPassword2024!
DOMAIN=errorlog.app

# Redis Configuration
REDIS_PORT=6379
REDIS_URL=redis://redis:6379/0

# Security Settings
SECURE_SSL_REDIRECT=True
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True
SECURE_BROWSER_XSS_FILTER=True
SECURE_CONTENT_TYPE_NOSNIFF=True
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=True
SECURE_HSTS_PRELOAD=True
CSRF_TRUSTED_ORIGINS=https://maintenance.errorlog.app,https://www.maintenance.errorlog.app
SECURE_PROXY_SSL_HEADER=HTTP_X_FORWARDED_PROTO,https
"""
    
    # Write template to file
    template_file = 'portainer.env.template'
    try:
        with open(template_file, 'w') as f:
            f.write(env_template)
        print(f"  ‚úÖ Generated {template_file}")
        print(f"  üìã Copy the contents to your Portainer stack environment variables")
    except Exception as e:
        print(f"  ‚ùå Error writing template: {e}")

def main():
    """Main test function"""
    print("üöÄ Portainer Integration Test Suite")
    print("=" * 50)
    
    # Run all tests
    env_ok = test_environment_variables()
    version_data = test_version_files()
    test_docker_compose_files()
    test_portainer_build_script()
    
    # Generate template if we have version data
    if version_data:
        generate_portainer_env_template()
    
    # Summary
    print("\n" + "=" * 50)
    print("üìä Test Summary")
    print("=" * 50)
    
    if env_ok and version_data:
        print("‚úÖ All tests passed! Portainer integration is ready.")
        print(f"üöÄ Current version: {version_data['version']}")
        print("üìã Use the generated portainer.env.template for deployment")
    else:
        print("‚ö†Ô∏è  Some tests failed. Please check the issues above.")
        if not env_ok:
            print("   - Environment variables need to be configured")
        if not version_data:
            print("   - Version files are missing or corrupted")
    
    print("\nüîß Next Steps:")
    print("   1. Copy environment variables to Portainer")
    print("   2. Upload appropriate stack file")
    print("   3. Deploy and monitor health checks")
    print("   4. Verify endpoints are working")

if __name__ == "__main__":
    main()

