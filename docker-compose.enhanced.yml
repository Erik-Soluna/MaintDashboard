version: '3.8'

services:
  db:
    image: postgres:15
    container_name: maintenance_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-maintenance_dashboard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-maintenance_dashboard}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: maintenance_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  web:
    build: .
    container_name: maintenance_web
    entrypoint: ["./docker-entrypoint.sh"]
    command: ["web"]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "${WEB_PORT:-4405}:8000"
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-docker-development-key-change-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,0.0.0.0,maintenance.errorlog.app}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@maintenance.local}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-temppass123}
      - SKIP_DB_INIT=${SKIP_DB_INIT:-false}
      - SKIP_COLLECTSTATIC=${SKIP_COLLECTSTATIC:-false}
      - MAX_RETRIES=${MAX_RETRIES:-30}
      - RETRY_DELAY=${RETRY_DELAY:-5}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maintenance_network
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maintenance-web.rule=Host(`maintenance.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.maintenance-web.entrypoints=websecure"
      - "traefik.http.routers.maintenance-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.maintenance-web.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  celery:
    build: .
    container_name: maintenance_celery
    entrypoint: ["./docker-entrypoint.sh"]
    command: ["celery"]
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-docker-development-key-change-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - SKIP_DB_INIT=true
      - SKIP_COLLECTSTATIC=true
      - C_FORCE_ROOT=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "celery", "-A", "maintenance_dashboard", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  celery-beat:
    build: .
    container_name: maintenance_celery_beat
    entrypoint: ["./docker-entrypoint.sh"]
    command: ["celery-beat"]
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-docker-development-key-change-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - SKIP_DB_INIT=true
      - SKIP_COLLECTSTATIC=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery.*beat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Optional: Database monitoring and backup service
  db-monitor:
    image: postgres:15
    container_name: maintenance_db_monitor
    environment:
      - PGHOST=db
      - PGPORT=5432
      - PGUSER=${DB_USER:-postgres}
      - PGPASSWORD=${DB_PASSWORD:-postgres}
      - PGDATABASE=${DB_NAME:-maintenance_dashboard}
    networks:
      - maintenance_network
    depends_on:
      db:
        condition: service_healthy
    restart: unless-stopped
    command: |
      sh -c "
        while true; do
          echo 'üîç Monitoring database health...'
          
          # Check database connection
          if pg_isready -h db -U ${DB_USER:-postgres} -d ${DB_NAME:-maintenance_dashboard}; then
            echo '‚úÖ Database is healthy'
          else
            echo '‚ùå Database connection failed'
            
            # Try to trigger auto-recovery
            if [ -f /app/auto_init_database.py ]; then
              python3 /app/auto_init_database.py
            fi
          fi
          
          # Check database size
          SIZE=$$(psql -h db -U ${DB_USER:-postgres} -d ${DB_NAME:-maintenance_dashboard} -t -c \"SELECT pg_size_pretty(pg_database_size('${DB_NAME:-maintenance_dashboard}'))\")
          echo \"üìä Database size: $$SIZE\"
          
          # Sleep for 60 seconds
          sleep 60
        done
      "
    volumes:
      - .:/app
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Optional: Web health checker
  web-monitor:
    image: curlimages/curl:latest
    container_name: maintenance_web_monitor
    networks:
      - maintenance_network
    depends_on:
      web:
        condition: service_healthy
    restart: unless-stopped
    command: |
      sh -c "
        while true; do
          echo 'üîç Monitoring web application health...'
          
          # Check if web service is responding
          if curl -f http://web:8000/health/ --connect-timeout 5 --max-time 10; then
            echo '‚úÖ Web application is healthy'
          else
            echo '‚ùå Web application health check failed'
            
            # Log the failure
            echo \"[$$(date)] Web health check failed\" >> /tmp/health_failures.log
          fi
          
          # Check application metrics
          if curl -f http://web:8000/admin/ --connect-timeout 5 --max-time 10 > /dev/null 2>&1; then
            echo '‚úÖ Admin interface is accessible'
          else
            echo '‚ö†Ô∏è  Admin interface check failed'
          fi
          
          # Sleep for 30 seconds
          sleep 30
        done
      "
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M

networks:
  maintenance_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
  proxy:
    external: true

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local