# File: models/db.py
# -*- coding: utf-8 -*-

"""
Database and Authentication initialization.

This module sets up the database, authentication, and defines reference and
equipment tables. It also creates a default administrative user and role if not already present.
"""

import logging
import uuid
from gluon.tools import Auth, Crud
# No need to import T in models, so we keep the imports as-is.

logging.basicConfig(level=logging.DEBUG)

# Initialize the Database and Authentication
db = DAL('sqlite://storage.sqlite', migrate=True)  # Ensure migration is enabled
auth = Auth(db)
crud = Crud(db)
auth.define_tables(username=True, migrate=True)

# Prevent Table Duplication - Define Reference Tables First
if 'equipment_category' not in db.tables:
    db.define_table('equipment_category',
        Field('name', 'string', unique=True, label='Category Name', requires=IS_NOT_EMPTY()),
        format='%(name)s'
    )

if 'site_location' not in db.tables:
    db.define_table('site_location',
        Field('name', 'string', unique=True, label='Site Name', requires=IS_NOT_EMPTY()),
        format='%(name)s'
    )

if 'equipment_location' not in db.tables:
    db.define_table('equipment_location',
        Field('name', 'string', unique=True, label='Location Name', requires=IS_NOT_EMPTY()),
        Field('site_location', 'reference site_location', label='Site Location',
              requires=IS_IN_DB(db, 'site_location.id', 'site_location.name')),
        Field('latitude', 'double', label='Latitude (Future Use)'),
        Field('longitude', 'double', label='Longitude (Future Use)'),
        format='%(name)s'
    )

# Add Group ID to auth_user Table if it doesn't exist
if 'groupID' not in db.auth_user.fields:
    db.auth_user.groupID = Field('groupID', 'integer', default=2)

db.commit()

# Secure Admin Account Creation with Random Password
admin_user = db(db.auth_user.username == 'admin').select().first()
if not admin_user:
    import random, string
    random_password = ''.join(random.choices(string.ascii_letters + string.digits, k=12))
    hashed_password = db.auth_user.password.validate(random_password)[0]
    
    admin_id = db.auth_user.insert(
        username='admin',
        email='admin@example.com',
        password=hashed_password,
        first_name='System',
        last_name='Administrator',
        groupID=1
    )
    db.commit()
    logging.info(f"Admin account created. Username: admin, Password: {random_password}")
else:
    admin_id = admin_user.id

# Ensure Admin Role Exists
admin_role = db(db.auth_group.role == 'admin').select().first()
if not admin_role:
    admin_role_id = db.auth_group.insert(role='admin', description='Full administrative access')
    db.commit()
else:
    admin_role_id = admin_role.id

# Ensure Admin User is Assigned to the Admin Role
admin_membership = db((db.auth_membership.user_id == admin_id) &
                      (db.auth_membership.group_id == admin_role_id)).select().first()
if not admin_membership:
    db.auth_membership.insert(user_id=admin_id, group_id=admin_role_id)
    db.commit()

# Define Equipment Table AFTER Reference Tables
if 'equipment' not in db.tables:
    db.define_table('equipment',
        Field('name', 'string', required=True, label='Equipment Name', unique=True),
        Field('category', 'reference equipment_category', label='Category',
              requires=IS_IN_DB(db, 'equipment_category.id', 'equipment_category.name')),
        Field('manufacturer_serial', 'string', label='Manufacturer Serial', unique=True),
        Field('soluna_asset_tag', 'string', label='Asset Tag', unique=True),
        Field('site_location', 'reference site_location', label='Site Location',
              requires=IS_IN_DB(db, 'site_location.id', 'site_location.name')),
        Field('equipment_location', 'reference equipment_location', label='Equipment Location',
              requires=IS_IN_DB(db, 'equipment_location.id', 'equipment_location.name')),
        Field('datasheet', 'upload', label='Datasheet'),
        Field('warranty_details', 'text', label='Warranty Details'),
        Field('installed_upgrades', 'text', label='Installed Upgrades'),
        Field('power_ratings', 'string', label='Power Ratings'),
        Field('trip_setpoints', 'string', label='Trip Setpoints'),
        Field('schematics', 'upload', label='Schematics'),
        Field('created_by', 'reference auth_user', default=auth.user_id, readable=False, writable=False),
        Field('modified_by', 'reference auth_user', update=auth.user_id, readable=False, writable=False),
        Field('created_on', 'datetime', default=request.now, readable=False, writable=False),
        Field('modified_on', 'datetime', update=request.now, readable=False, writable=False)
    )

db.commit()

# Add Unique Indexes to Ensure Database Integrity
db.executesql("CREATE UNIQUE INDEX IF NOT EXISTS unique_name ON equipment (name);")
db.executesql("CREATE UNIQUE INDEX IF NOT EXISTS unique_serial ON equipment (manufacturer_serial);")
db.executesql("CREATE UNIQUE INDEX IF NOT EXISTS unique_asset_tag ON equipment (soluna_asset_tag);")

# Debugging: Check for Duplicate Entries
duplicates = db(db.equipment.name).select(db.equipment.name, groupby=db.equipment.name,
                                           having=(db.equipment.id.count() > 1))
if duplicates:
    logging.warning(f"Duplicate Equipment Names Found: {duplicates}")
