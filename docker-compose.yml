version: '3.8'

# ⚠️ UNSTABLE DEVELOPMENT VERSION ⚠️
# This compose file is for development/testing only
# Features may be incomplete, broken, or change without notice

services:
  db:
    image: postgres:15
    container_name: maintenance_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-maintenance_dashboard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-maintenance_dashboard}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  redis:
    image: redis:7-alpine
    container_name: maintenance_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  web:
    build: .
    container_name: maintenance_web
    entrypoint: ["./scripts/deployment/docker-entrypoint.sh"]
    command: ["web"]
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "${WEB_PORT:-4405}:8000"
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-docker-development-key-change-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,maintenance.errorlog.app,10.0.0.28,web
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@maintenance.local}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-temppass123}
      - SKIP_DB_INIT=${SKIP_DB_INIT:-false}
      - SKIP_COLLECTSTATIC=${SKIP_COLLECTSTATIC:-false}
      - MAX_RETRIES=${MAX_RETRIES:-30}
      - RETRY_DELAY=${RETRY_DELAY:-5}
      - DOCKER_LOGS_ENABLED=${DOCKER_LOGS_ENABLED:-True}
      - DOCKER_LOGS_DEBUG_ONLY=${DOCKER_LOGS_DEBUG_ONLY:-True}
      - DOCKER_LOGS_MAX_LINES=${DOCKER_LOGS_MAX_LINES:-1000}
      - DOCKER_LOGS_RATE_LIMIT=${DOCKER_LOGS_RATE_LIMIT:-10}
      - DOCKER_LOGS_TIMEOUT=${DOCKER_LOGS_TIMEOUT:-30}
      - DOCKER_LOGS_REQUIRE_SUPERUSER=${DOCKER_LOGS_REQUIRE_SUPERUSER:-True}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maintenance_network
      - proxy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maintenance-web.rule=Host(`maintenance.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.maintenance-web.entrypoints=websecure"
      - "traefik.http.routers.maintenance-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.maintenance-web.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy-network"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/core/health/simple/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  celery:
    build: .
    container_name: maintenance_celery
    entrypoint: ["./scripts/deployment/docker-entrypoint.sh"]
    command: ["celery"]
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-docker-development-key-change-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - SKIP_DB_INIT=true
      - SKIP_COLLECTSTATIC=true
      - C_FORCE_ROOT=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "celery", "-A", "maintenance_dashboard", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  celery-beat:
    build: .
    container_name: maintenance_celery_beat
    entrypoint: ["./scripts/deployment/docker-entrypoint.sh"]
    command: ["celery-beat"]
    volumes:
      - .:/app
      - media_volume:/app/media
    environment:
      - DEBUG=${DEBUG:-True}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-docker-development-key-change-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - SKIP_DB_INIT=true
      - SKIP_COLLECTSTATIC=true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery.*beat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # playwright:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.playwright
  #   container_name: playwright_runner
  #   depends_on:
  #     - web
  #   volumes:
  #     - ./playwright:/app/playwright
  #   environment:
  #     - BASE_URL=http://web:8000
  #     - GITHUB_TOKEN=${GITHUB_TOKEN:-}
  #     - GITHUB_REPO=${GITHUB_REPO:-erikw/MaintDashboard}
  #     - GITHUB_OWNER=${GITHUB_OWNER:-erikw}
  #     - GITHUB_REPO_NAME=${GITHUB_REPO_NAME:-MaintDashboard}
  #   networks:
  #     - maintenance_network
  #   restart: unless-stopped

networks:
  maintenance_network:
    driver: bridge
  proxy-network:
    external: true

volumes:
  postgres_data:
  static_volume:
  media_volume: