version: '3.8'

services:
  db:
    image: postgres:15
    container_name: maintenance_db_prod
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: ${DB_NAME:-maintenance_dashboard}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-maintenance_dashboard}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:7-alpine
    container_name: maintenance_redis_prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: maintenance_web_prod
    command: >
      sh -c "chmod +x /app/ensure-database.sh &&
             /app/ensure-database.sh &&
             python manage.py init_database --admin-username ${ADMIN_USERNAME:-admin} --admin-email ${ADMIN_EMAIL:-admin@maintenance.local} --admin-password ${ADMIN_PASSWORD:-temppass123} &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8000 --workers 3 --timeout 120 --max-requests 1000 --max-requests-jitter 100 maintenance_dashboard.wsgi:application"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    ports:
      - "${WEB_PORT:-4405}:8000"
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-me-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-localhost,127.0.0.1,maintenance.errorlog.app,10.0.0.28}
      - ADMIN_USERNAME=${ADMIN_USERNAME:-admin}
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@maintenance.local}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-temppass123}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maintenance_network
      - proxy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.maintenance-web.rule=Host(`maintenance.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.maintenance-web.entrypoints=websecure"
      - "traefik.http.routers.maintenance-web.tls.certresolver=letsencrypt"
      - "traefik.http.services.maintenance-web.loadbalancer.server.port=8000"
      - "traefik.docker.network=proxy-network"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: maintenance_celery_prod
    command: celery -A maintenance_dashboard worker --loglevel=info --concurrency=2 --max-tasks-per-child=1000
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-me-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - C_FORCE_ROOT=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "celery", "-A", "maintenance_dashboard", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: maintenance_celery_beat_prod
    command: celery -A maintenance_dashboard beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY:-django-insecure-change-me-in-production}
      - DB_NAME=${DB_NAME:-maintenance_dashboard}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - maintenance_network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "celery.*beat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

networks:
  maintenance_network:
    driver: bridge
  proxy-network:
    external: true

volumes:
  postgres_data:
  static_volume:
  media_volume: