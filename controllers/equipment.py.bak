# File: controllers/equipment.py
# -*- coding: utf-8 -*-

"""Controller for equipment management."""

import logging
from gluon import current
import json  # Import the json module

T = current.T

logging.basicConfig(level=logging.DEBUG)


def _get_equipment_data(equipment_id=None, as_dict=False, query=None):
    """
    Helper function to retrieve equipment data with related information.

    Args:
        equipment_id (int, optional): The ID of the equipment to retrieve. Defaults to None.
        as_dict (bool, optional): Whether to return the data as a list of dictionaries. Defaults to False.
        query (SQLQuery, optional): An optional SQL query to filter the results. Defaults to None.

    Returns:
        list: A list of equipment records or a list of dictionaries.
    """
    if query is None:
        query = db.equipment

    if equipment_id:
        query = (db.equipment.id == equipment_id) & query

    equipment_records = db(query).select()

    if as_dict:
        equipment_list = []
        for eq in equipment_records:
            equipment_list.append(eq.as_dict())
        return equipment_list
    else:
        return equipment_records


@auth.requires_login()
def manage_equipment():
    """Render the manage equipment page with related data."""
    equipment_list = []  # Start with an empty list for testing
    fields = ['name', 'category', 'manufacturer_serial']  # A simplified list of fields
    field_labels = {'name': 'Equipment Name', 'category': 'Category', 'manufacturer_serial': 'Serial'}
    return dict(equipment_list=equipment_list, fields=fields, field_labels=field_labels)


@auth.requires_login()
def search_equipment():
    """Search for equipment based on a search term."""
    search_term = request.vars.get('search_term')
    if not search_term:
        return response.json({'status': 'error', 'message': 'No search term provided'})

    # Build the search query
    query = (db.equipment.name.contains(search_term)) | (
        db.equipment.manufacturer_serial.contains(search_term)
    ) | (db.equipment.soluna_asset_tag.contains(search_term))  # Add more fields as needed

    equipment_list = _get_equipment_data(query=query, as_dict=True)
    return response.json({'status': 'success', 'equipment': equipment_list})
